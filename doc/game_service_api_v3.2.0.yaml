openapi: 3.0.0
info:
  title: Game Service API
  version: 1.3.2
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:8082   
paths:
  "/games":
    post:
      summary: Creates a new game
      tags:
      - games
      description: Creates a new game. Only one game can be running at a time, so creating a new one is only possible if there is currently no active instance.
      security:
        - BearerAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/game"
      responses:
        "201":
          description: A new game has been successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    $ref: "#/components/schemas/uuid"
        "406":
          description: Invalid input, object invalid.
  
    get:
      summary: Returns all open or running games.
      tags:
      - games
      description: Returns a list of all open or active games. For a list of all players refer to the GameLog.
      responses:
        "201":
          description: A list of all open or running games at the moment.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/gameInfo"
            
  "/games/{gameId}/time":
    get:
      summary: Returns the current time
      tags:
      - games
      description: Returns the current time once the game has been started.
      parameters:
        - $ref: "#/components/parameters/gameId"
      responses:
        "200":
          description: Returns the current time.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roundTime"
          
  "/games/{gameId}/gameCommands/start":
    post:
      summary: Starts the game.
      tags:
      - games
      description: Gives the command to start the game. Only administrators are privileged to start the game. It can be executed only when a new game has been created and is waiting for the game to start.
      parameters:
        - $ref: "#/components/parameters/gameId"
      security:
        - BearerAuth: [admin]
      responses:
        "201":
          description: The command has been accepted and the game is about to start.
        "406":
          description: Only admins are allowed to start the game.
          
  "/games/{gameId}/gameCommands/end":
    post:
      summary: Ends the game.
      tags:
      - games
      description: Gives the command to end the game. Only administrators can give this command. Once the command is received, the current round will be continued, after which the game is closed.
      parameters:
        - $ref: "#/components/parameters/gameId"
      security:
        - BearerAuth: [admin]
      responses:
        "201":
          description: The command has been accepted and the game will be closed at the next possible moment.
        "406":
          description: Only admins are allowed to end the game.
          
  "/games/{gameId}/players/{playerToken}":
    put:
      summary: Registers a player for the game.
      tags:
      - games
      description: Registers the player, according to his token, for the game. Registration is only possible if the game exists and is in a startup phase that makes registrations possible. Once the game has been started, further registrations are not possible.
      parameters:
        - $ref: "#/components/parameters/gameId"
        - $ref: "#/components/parameters/playerToken"
      security:
        - BearerAuth: [player]
      responses:
        "200":
          description: Returns the UUID of the action that the player registered. Its NOT the playerId.
          content: 
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    $ref: "#/components/schemas/uuid"
        "400":
          description: Player not found, wrong game status or the game is already full.
        "406":
          description: The Player is already in a Game.
  
  "/games/{gameId}/maxRounds/{maxRounds}":
    patch:
      summary: Change number of rounds.
      tags:
      - games
      description: An Admin can change the maximal rounds of a game.
      parameters:
        - $ref: "#/components/parameters/gameId" 
        - $ref: "#/components/parameters/maxRounds" 
      security:
        - BearerAuth: [admin]
      responses:
        "200":
          description: The maximal of rounds has been successfully changed for the game.
        "500":
          description: The max rounds couldnt been changed.

  "/games/{gameId}/roundDuration/{newDuration}":
    patch:
      summary: Change duration of the rounds.
      tags:
      - games
      description: An Admin can change the duration of the rounds from the game.
      parameters:
        - $ref: "#/components/parameters/gameId" 
        - $ref: "#/components/parameters/newDuration" 
      security:
        - BearerAuth: [admin]
      responses:
        "200":
          description: The duration of the rounds have been successfully changed for the game.
        "500":
          description: The game duration couldnt been changed.
            
  "/players":
    post:
      summary: Creates a new player.
      tags:
      - players
      description: A player can register using a name and email and, upon successful registration, will receive a Bear token that they can use to authenticate themselves in the future.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/player"
      responses:
        "201":
          description: The player has been successfully registered.
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/player"
        "409":
          description: his player already exists.

          
  "/commands":
    post:
      summary: Creates a new command for the specified robot
      tags: 
      - commands
      description: A new command will be created for the specific robot and will be processed at the next possible time. Multiple commands can be given per player per turn, but there can only be one command per robot at a time. Duplicate commands always replace the previous one. A player is not allowed to give orders for a robot that does not belong to him.
      security:
        - BearerAuth: [player]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/command"
      responses:
        "201":
          description: Returns the UUID of the newly created command.
          content: 
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    $ref: "#/components/schemas/uuid"
        "404":
          description: The user has no permission to access this resource.
        "500":
          description: This command be created.
          
    get:
      summary: Returns all player commands of a round.
      tags: 
      - commands
      description: After the round of a game is finished, the commands of this can be retrieved.
      security:
        - BearerAuth: [server]
      parameters:
        - in: query
          name: gameId
          required: true
          schema:
            $ref: "#/components/schemas/uuid"
        - in: query
          name: roundNumber
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: Contains all player commands of a round.
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    $ref: "#/components/schemas/uuid"
                  roundId:
                    $ref: "#/components/schemas/uuid"
                  roundNumber:
                    type: integer
                  commands:
                    type: array
                    items: 
                      $ref: "#/components/schemas/commandOutput"
        "400":
          description: Invalid input.
        "404":
          description: The given round couldnt be found.
        "500":
          description: The request could not be processed.
            
            
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      
  parameters:
    gameId:
      in: path
      name: gameId
      schema:
        $ref: "#/components/schemas/uuid"
      required: true
      
    maxRounds:
      in: path
      name: maxRounds
      description: Defines the maximum possible number of rounds. 
      schema:
        $ref: "#/components/schemas/roundNumber"
      required: true
 
    newDuration:
      in: path
      name: newDuration
      description: Defines the duration of a round. 
      schema:
        $ref: "#/components/schemas/duration"
      required: true
      
    playerToken:
      in: path
      name: playerToken
      description: Defines a token given for a player. 
      schema:
        $ref: "#/components/schemas/playerToken"
      required: true  
    
    
  schemas:
    uuid:
      type: string
      format: uuid
      example: d290f1ee-6c54-4b01-90e6-d701748f0851
    
    roundNumber:
      type: integer
      example: 3
     
    duration:
      type: integer
      format: int64
      example: 3 
    
    gameStatus:
      description: The different status that a game can have.
      type: string
      enum:
        - Created
        - Game_Running
        - Game_Finished
    
    playerToken:
      type: string
      format: uuid
      example: d290f1ee-6c54-4b01-90e6-d701748f0852
      
    itemQuantity:
      type: integer
      format: int64
      example: 5
    
    commandType:
      description: Specifies the command type. Type and content must match, otherwise the command cannot be processed.
      type: string
      enum:
        - blocking
        - buying
        - selling
        - movement
        - battle
        - mining
        - regeneration
        - battleItemUse
        - repairItemUse
        - moveItemUse
        
    commandObject:
      description: Defines the command content. The corresponding syntax is given by the robot service.
      type: object
      required:
        - commandType
      properties:
        commandType:
          $ref: "#/components/schemas/commandType"
        planetId:
          $ref: "#/components/schemas/uuid"
        targetId:
          $ref: "#/components/schemas/uuid"
        itemName:
          $ref: "#/components/schemas/commandItem"  
        itemQuantity:
          $ref: "#/components/schemas/itemQuantity"        
    commandItem:
      description: Defines whether a command is bound to an object. The corresponding syntax is given by the robot service.
      type: string
      format: JsonNode
      
    game:
      type: object
      required:
        - maxRounds
        - maxPlayer
      properties:
        maxRounds:
          description: Defines the maximum possible number of rounds.
          type: integer
          minimum: 1
          example: 58
        maxPlayer:
          description: Defines the maximum possible number of players.
          type: integer
          minimum: 1
          example: 6
          
    gameInfo:
      type: object
      properties:
        gameId:
          $ref: "#/components/schemas/uuid"      
        gameStatus:
          $ref: "#/components/schemas/gameStatus"
        maxPlayer:
          description: Defines the maximum possible number of players.
          type: integer
          minimum: 1
          example: 6      
        maxRounds:
          description: Defines the maximum possible number of rounds.
          type: integer
          minimum: 1
          example: 58
        roundDuration:  
          $ref: "#/components/schemas/duration"  
        commandCollectDuration:
          description: Defines the time, how long the commands can get collected.
          type: number
          example: 45000.0
        createdGameDateTime:
          type: string
          format: date-time
          example: "2022-01-06T09:49:06"
        lastRoundStartedAt:
          type: string
          format: date-time
          example: "2020-02-06T09:49:07"
        currentRoundCount:
          description: Amount of rounds, that happend in the current game.
          type: integer
        playerList:
          description: List of all the player in the game.
          type: array  
          items: 
             $ref: "#/components/schemas/uuid"
        gameStartTime:
          description: Date when the current game started.
          type: string
          format: date-time
          example: "2020-02-06T07:49:07"
        playersInGame:
          description: List of all the player in the game.
          type: array 
          items:
            $ref: "#/components/schemas/uuid"

    roundTime:
      type: object
      properties:
        gameTime:
          description: Elapsed time in seconds since the start of the game.
          type: integer
          example: 183
        roundCount:
          description: Number of the current round.
          type: integer
          example: 4
        roundTime:
          description: Elapsed time in seconds since the start of the round.
          type: integer
          example: 33
          
    player:
      type: object
      required:
        - name
        - email
      properties:
        bearerToken:
          allOf:
            - description: This field is left blank during registration. The player receives the token as a confirmation in response to his successful registration.
            - $ref: "#/components/schemas/uuid"
        name:
          description: The name the player chooses to be displayed in the game.
          type: string
          example: "Rigatoni"
        email:
          description: An email address through which the player can have his token restored.
          type: string
          format: email
          
    command:
      description: The command that a player wants to send to his robot.
      type: object
      required:
        - gameId
        - playerId
        - robotId
        - commandType
        - commandObject
      properties:
        gameId:
          $ref: "#/components/schemas/uuid"
        playerId:
          $ref: "#/components/schemas/uuid"
        robotId:
          $ref: "#/components/schemas/uuid"
        commandType:
          $ref: "#/components/schemas/commandType"
        commandObject:
          $ref: "#/components/schemas/commandObject"
    commandOutput:
      description: The command that has been accepted from a player for a specific game, round and robot.
      type: object
      properties:
        transacionId:
          $ref: "#/components/schemas/uuid"
        gameId:
          $ref: "#/components/schemas/uuid"
        playerId:
          $ref: "#/components/schemas/uuid"  
        robotId:
          $ref: "#/components/schemas/uuid"
        commandType:
          $ref: "#/components/schemas/commandType"
        commandObject:
          $ref: "#/components/schemas/commandObject"
