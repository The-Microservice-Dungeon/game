openapi: 3.0.0
info:
  title: Game Service API
  version: 1.3.2
servers:
  - url: http://{defaultHost}
    variables:
      defaultHost:
        default: localhost:8082
paths:
  "/games":
    post:
      summary: Creates a new game
      tags:
        - games
      description: Creates a new game. Only one game can be running at a time, so creating a new one is only possible if there is currently no active instance.
      security:
        - BearerAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/game"
      responses:
        "201":
          description: A new game has been successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    $ref: "#/components/schemas/uuid"
        "403":
          description: Forbidden. An active game already exists. A game is considered active when its status is either  "CREATED" or "RUNNING". Active games have to be closed in order to create a new one.

    get:
      summary: All active games.
      tags:
        - games
      description: Returns a list of all open or active games. But there may only be one.
      responses:
        "200":
          description: A list of all open or running games at the moment.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/gameInfo"

  "/games/{gameId}/time":
    get:
      summary: Returns the current time
      tags:
        - games
      description: Returns the current time once the game has been started.
      parameters:
        - $ref: "#/components/parameters/gameId"
      responses:
        "200":
          description: Returns the current time.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roundTime"
        "404":
          description: Game not found.

  "/games/{gameId}/gameCommands/start":
    post:
      summary: Starts the game.
      tags:
        - games
      description: Gives the command to start the game. Only administrators are privileged to start the game. It can be executed only when a new game has been created and is waiting for the game to start.
      parameters:
        - $ref: "#/components/parameters/gameId"
      security:
        - BearerAuth: [admin]
      responses:
        "201":
          description: The command has been accepted and the game is about to start.
        "403":
          description: Game is in a state that prevents it from being started. Its either running or closed.
        "404":
          description: Game not found.

  "/games/{gameId}/gameCommands/end":
    post:
      summary: Ends the game.
      tags:
        - games
      description: Gives the command to end the game. Only administrators can give this command. Once the command is received, the current round will be continued, after which the game is closed.
      parameters:
        - $ref: "#/components/parameters/gameId"
      security:
        - BearerAuth: [admin]
      responses:
        "201":
          description: The command has been accepted and the game will be closed at the next possible moment.
        "403":
          description: Failed to end game. Game is in a state that prevents it from beeing stopped.
        "404":
          description: Game not found.

  "/games/{gameId}/players/{playerToken}":
    put:
      summary: Registers a player for the game.
      tags:
        - games
      description: Registers the player, according to his token, for the game. The playerToken is the bearertoken. Registration is only possible if the game exists and is in a startup phase that makes registrations possible. Once the game has been started, further registrations are not possible.
      parameters:
        - $ref: "#/components/parameters/gameId"
        - $ref: "#/components/parameters/playerToken"
      security:
        - BearerAuth: [player]
      responses:
        "200":
          description: Joined game successful. Player will participate once the game starts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    $ref: "#/components/schemas/uuid"
        "403":
          description: Failed to join game. Its either full or has already started.
        "404":
          description: Player or game not found.

  "/games/{gameId}/maxRounds/{maxRounds}":
    patch:
      summary: Change number of rounds.
      tags:
        - games
      description: An Admin can change the maximal rounds of a game.
      parameters:
        - $ref: "#/components/parameters/gameId"
        - $ref: "#/components/parameters/maxRounds"
      security:
        - BearerAuth: [admin]
      responses:
        "200":
          description: The maximal of rounds has been successfully changed for the game.
        "500":
          description: The max rounds couldnt been changed.

  "/games/{gameId}/roundDuration/{newDuration}":
    patch:
      summary: Change duration of the rounds.
      tags:
        - games
      description: An Admin can change the duration of the rounds from the game.
      parameters:
        - $ref: "#/components/parameters/gameId"
        - $ref: "#/components/parameters/newDuration"
      security:
        - BearerAuth: [admin]
      responses:
        "200":
          description: The duration of the rounds have been successfully changed for the game.
        "500":
          description: The game duration couldnt been changed.

  "/players":
    post:
      summary: Creates a new player.
      tags:
        - players
      description: A player can register using a name and email and, upon successful registration, will receive a Bear token that they can use to authenticate themselves in the future.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/player"
      responses:
        "201":
          description: The player has been successfully registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/player"
        "403":
          description: Player with same name or mail already exists.
    get:
      summary: Fetches player-details.
      tags:
        - players
      description: A player can only be registered once. If it happens that the PlayerToken is lost, it can be retrieved again by the name and email address of the player.
      parameters:
        - in: query
          name: name
          required: true
          description: Player's name
          schema:
            type: string
        - in: query
          name: mail
          required: true
          description: Player's mail
          schema:
            type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/player"
        "404":
          description: Player not found.


  "/commands":
    post:
      summary: Creates a new command for the specified robot
      tags:
        - commands
      description: A new command will be created for the specific robot and will be processed at the next possible time. Multiple commands can be given per player per turn, but there can only be one command per robot at a time. Duplicate commands always replace the previous one. A player is not allowed to give orders for a robot that does not belong to him.
      security:
        - BearerAuth: [player]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/command"
      responses:
        "201":
          description: Command successfully created. Returns commandId (transactionId)
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    $ref: "#/components/schemas/uuid"
        "400":
          description: Syntax invalid, eg. commandType.
        "403":
          description: Game not ready (has't started yet or already finished) or command invalid. That may happen if the player is trying to send commands for robots that do not belong to him.
        "404":
          description: Player or game not found.

    get:
      summary: Returns all player commands of a round.
      tags:
        - commands
      description: After the round of a game is finished, the commands of this can be retrieved.
      security:
        - BearerAuth: [server]
      parameters:
        - in: query
          name: gameId
          required: true
          schema:
            $ref: "#/components/schemas/uuid"
        - in: query
          name: roundNumber
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: Contains all player commands of a round.
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    $ref: "#/components/schemas/uuid"
                  roundId:
                    $ref: "#/components/schemas/uuid"
                  roundNumber:
                    type: integer
                  commands:
                    type: array
                    items:
                      $ref: "#/components/schemas/commandOutput"
        "400":
          description: Invalid input.
        "404":
          description: The given round couldnt be found.
  "/logs/game-info":
    get:
      summary: Game-Logic related logging w/ level INFO
      tags:
        - logs
      responses:
        "200":
          description: Log found.
          content:
            text/plain:
              schema:
                type: string
  "/logs/game-trace":
    get:
      summary: Game-Logic related logging w/ level TRACE
      tags:
        - logs
      responses:
        "200":
          description: Log found.
          content:
            text/plain:
              schema:
                type: string
  "/logs/info":
    get:
      summary: Application related logging w/ level INFO
      tags:
        - logs
      responses:
        "200":
          description: Log found.
          content:
            text/plain:
              schema:
                type: string
  "/logs/error":
    get:
      summary: Application related logging w/ level ERROR
      tags:
        - logs
      responses:
        "200":
          description: Log found.
          content:
            text/plain:
              schema:
                type: string


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  parameters:
    gameId:
      in: path
      name: gameId
      schema:
        $ref: "#/components/schemas/uuid"
      required: true

    maxRounds:
      in: path
      name: maxRounds
      description: Defines the maximum possible number of rounds.
      schema:
        $ref: "#/components/schemas/roundNumber"
      required: true

    newDuration:
      in: path
      name: newDuration
      description: Total duration of a round in milliseconds.
      schema:
        $ref: "#/components/schemas/duration"
      required: true

    playerToken:
      in: path
      name: playerToken
      description: Defines a token given for a player.
      schema:
        $ref: "#/components/schemas/playerToken"
      required: true


  schemas:
    uuid:
      type: string
      format: uuid
      example: d290f1ee-6c54-4b01-90e6-d701748f0851

    roundNumber:
      type: integer
      example: 3

    duration:
      type: integer
      format: int64
      example: 60000

    gameStatus:
      description: Now in sync with asyncAPI gameStatus status-enum.
      type: string
      enum:
        - created
        - started
        - ended

    playerToken:
      type: string
      format: uuid
      example: d290f1ee-6c54-4b01-90e6-d701748f0852

    itemQuantity:
      type: integer
      format: int64
      example: 5

    commandType:
      description: Specifies the command type. Type and content must match, otherwise the command cannot be processed.
      type: string
      enum:
        - blocking
        - buying
        - selling
        - movement
        - battle
        - mining
        - regeneration
        - battleItemUse
        - repairItemUse
        - moveItemUse

    commandObject:
      description: Defines the command content. The corresponding syntax is given by the robot service.
      type: object
      required:
        - commandType
      properties:
        commandType:
          $ref: "#/components/schemas/commandType"
        planetId:
          $ref: "#/components/schemas/uuid"
        targetId:
          $ref: "#/components/schemas/uuid"
        itemName:
          $ref: "#/components/schemas/commandItem"
        itemQuantity:
          $ref: "#/components/schemas/itemQuantity"
    commandItem:
      description: Defines whether a command is bound to an object. The corresponding syntax is given by the robot service.
      type: string
      format: JsonNode

    game:
      type: object
      required:
        - maxRounds
        - maxPlayers
      properties:
        maxRounds:
          description: Defines the maximum possible number of rounds.
          type: integer
          minimum: 1
          example: 58
        maxPlayers:
          description: Defines the maximum possible number of players.
          type: integer
          minimum: 1
          example: 6

    gameInfo:
      type: object
      properties:
        gameId:
          $ref: "#/components/schemas/uuid"
        gameStatus:
          $ref: "#/components/schemas/gameStatus"
        maxPlayers:
          description: Maximum possible number of players participating.
          type: integer
          minimum: 1
          example: 6
        maxRounds:
          description: Maximum possible number of rounds before the game terminates.
          type: integer
          minimum: 1
          example: 58
        currentRoundNumber:
          description: Current round-number. May be null if game hasnt started yet.
          type: integer
        roundLengthInMillis:
          $ref: "#/components/schemas/duration"
        participatingPlayers:
          description: List of all the players participating in the game.
          type: array
          items:
            $ref: "#/components/schemas/uuid"

    roundTime:
      type: object
      properties:
        gameTime:
          description: Elapsed time in seconds since the start of the game. Null if game hasnt started yet.
          type: integer
          format: int64
          example: 183
        roundCount:
          description: Number of the current round. Null if game hasnt started yet.
          type: integer
          example: 4
        roundTime:
          description: Elapsed time in seconds since the start of the round. Null if game hasnt started yet.
          type: integer
          format: int64
          example: 33

    player:
      type: object
      required:
        - name
        - email
      properties:
        bearerToken:
          allOf:
            - description: This field is left blank during registration. The player receives the token as a confirmation in response to his successful registration.
            - $ref: "#/components/schemas/uuid"
        name:
          description: The name the player chooses to be displayed in the game.
          type: string
          example: "Rigatoni"
        email:
          description: An email address through which the player can have his token restored.
          type: string
          format: email

    command:
      description: The command that a player wants to send to his robot.
      type: object
      required:
        - gameId
        - playerToken
        - commandType
        - commandObject
      properties:
        gameId:
          $ref: "#/components/schemas/uuid"
        playerToken:
          $ref: "#/components/schemas/uuid"
        robotId:
          $ref: "#/components/schemas/uuid"
        commandType:
          $ref: "#/components/schemas/commandType"
        commandObject:
          $ref: "#/components/schemas/commandObject"
    commandOutput:
      description: The command that has been accepted from a player for a specific game, round and robot.
      type: object
      properties:
        transacionId:
          $ref: "#/components/schemas/uuid"
        gameId:
          $ref: "#/components/schemas/uuid"
        playerId:
          $ref: "#/components/schemas/uuid"
        robotId:
          $ref: "#/components/schemas/uuid"
        commandType:
          $ref: "#/components/schemas/commandType"
        commandObject:
          $ref: "#/components/schemas/commandObject"
